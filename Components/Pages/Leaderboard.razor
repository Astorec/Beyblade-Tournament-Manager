@page "/Leaderboard"
@using BeybladeTournamentManager.ApiCalls.Challonge
@using BeybladeTournamentManager.ApiCalls.Challonge.Data
@using BeybladeTournamentManager.ApiCalls.Google
@using BeybladeTournamentManager.Config
@using BeybladeTournamentManager.Helpers

@inject IGoogleService _googleService
@inject IPlayerHelper _playerHelper
@inject IAutentication _challongeAuth
@if (loading)
{
    <MudPaper class="d-flex flex-coloumn justify-center gap-3" Elevation="0">
        Loading content...
    </MudPaper>
}
else
{
    <MudPaper class="d-flex flex-coloumn justify-center gap-3" Elevation="0">
    <div class="d-flex flex-row flex-grow-1">
        <MudPaper Class="flex-grow-1 py-8" Width="64px" Elevation="0" />
        <MudPaper Class="d-flex  justify-center flex-grow-1 py-8 mt-1" Width="10%%" Elevation="0">
            <MudPaper Class="flex-grow py-8 mt-1 align-content-center" Width="23%" Elevation="0">
                <MudText>Select Leaderboard </MudText>
            </MudPaper>
            <MudPaper Class="flex-grow-1 py-8 mt-1" Width="90%" Elevation="0">
                    <MudSelect T="string" Value="@selectedLeaderboard" ValueChanged="OnLeaderboardChanged">
                        @foreach (var item in leaderboards)
                        {
                            <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudPaper>

            </MudPaper>

            <MudPaper Class="flex-grow-1 py-8" Width="64px" Elevation="0" />
        </div>


    </MudPaper>

    <MudPaper class="d-flex mt-2" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudTable T="Player" Items="@players">
                <HeaderContent>
                    <MudTh>Rank</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Points</MudTh>
                    <MudTh>W/L</MudTh>
                    <MudTh>First</MudTh>
                    <MudTh>Second</MudTh>
                    <MudTh>Third</MudTh>
                    <MudTh>Region</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTh>@context.LeaderboardRank</MudTh>
                    <MudTh>@context.Name</MudTh>
                    <MudTh>@context.Points</MudTh>
                    <MudTh>@context.Wins / @context.Losses</MudTh>
                    <MudTh>@context.first</MudTh>
                    <MudTh>@context.second</MudTh>
                    <MudTh>@context.third</MudTh>
                    <MudTh>@context.region</MudTh>
                </RowTemplate>
            </MudTable>
        </MudContainer>
    </MudPaper>
}


@code
{
    public List<Player> players = new List<Player>();
    private IEnumerable<string> leaderboards = new List<string>();
    private string selectedLeaderboard;
    bool loading = true;
    AppSettings settings;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            settings = _challongeAuth.GetSettings();
            players = _playerHelper.GetLeaderboard(settings.CurrentTournamentDetails.relatedSheetName).Result;
            leaderboards  = _playerHelper.GetSheetsList();
            selectedLeaderboard = leaderboards.FirstOrDefault();
            loading = false;
            StateHasChanged();
        }
    }
    private async Task OnLeaderboardChanged(string value)
    {
        selectedLeaderboard = value;
        await LoadLeaderboard();
    }   

    private async Task LoadLeaderboard()
    {
        players.Clear();
        var leaderboard = await _playerHelper.GetLeaderboard(selectedLeaderboard);
        players = leaderboard.OrderBy(p => p.LeaderboardRank, new LeaderboardRankComparer()).ToList();
        StateHasChanged();
    }

    public class LeaderboardRankComparer : IComparer<string>
{
    public int Compare(string x, string y)
    {
        // Try to parse both strings as integers
        bool xIsNumeric = int.TryParse(x, out int xRank);
        bool yIsNumeric = int.TryParse(y, out int yRank);

        // If both are numeric, compare their integer values
        if (xIsNumeric && yIsNumeric)
        {
            return xRank.CompareTo(yRank);
        }

        // If only x is numeric, it should come before y
        if (xIsNumeric)
        {
            return -1;
        }

        // If only y is numeric, it should come before x
        if (yIsNumeric)
        {
            return 1;
        }

        // If neither are numeric, compare them as strings
        return string.Compare(x, y, StringComparison.OrdinalIgnoreCase);
    }
}
}
