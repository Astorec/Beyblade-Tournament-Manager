@using BeybladeTournamentManager.ApiCalls.Challonge
@using BeybladeTournamentManager.ApiCalls.Challonge.Data
@using BeybladeTournamentManager.Helpers
@using Challonge.Api
@using Challonge.Objects
@using System.Text.RegularExpressions
@inject IAutentication _challongeAuth
@inject IPlayerHelper _playerHelper

@page "/"
<MudPaper class="d-flex flex-coloumn justify-center gap-3" Elevation="0">
    <div class="d-flex flex-row gap-2">
        <MudText Typo="Typo.h4">Tournament URL</MudText>
        <MudTextField @bind-Value="_tournamentUrl" />
    </div>
    <div>
            <MudButton Variant="Variant.Filled" Color="Color.Primary"
        OnClick="@(async () => { await GetParticipentsViaURL(); })">
        OK</MudButton>
    </div>
</MudPaper>

<MudPaper class="d-flex mt-2" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudTable T="Player" Items="@players">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Region</MudTh>
                <MudTh>Check-In</MudTh>
                <MudTh>Check-In Time</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.region</MudTd>
                <MudTd>
                    <MudSwitch T="bool" Value="@context.CheckInState" @onclick="@(e => OnCheckInStateChanged(context))" Color="Color.Primary"/>
                </MudTd>
                <MudTd>
                    <MudText>@context.CheckInTime</MudText>
                </MudTd>
            </RowTemplate>
        </MudTable>

    </MudContainer>
</MudPaper>


@code {
    ChallongeClient? _client;
    private MudTable<Player>? _table;
    List<Player> players = new List<Player>();
    private string _tournamentUrl = "";

    protected override async Task OnInitializedAsync()
    {
        if (_challongeAuth.GetClient() != null)
        {
            _client = _challongeAuth.GetClient();

            var url = _challongeAuth.GetSettings().CurrentTournament;
            if (url != null && url != "")
            {
                _tournamentUrl = url;
                var participants = await _client.GetParticipantsAsync(GetTournamentCode(_tournamentUrl));

                if (participants.Count() == 0)
                {
                    return;
                }
                List<Participant> participantsList = participants.ToList();
                    
                    // Prevent doubling up the list on switching tabs
                _playerHelper.ClearPlayers();
                // Add the new Players to the list
                AddPlayerFromParticipant(participantsList);

                
                players = _playerHelper.GetCurrentPlayers();

                StateHasChanged();                  
            }

        }
    }

    string GetTournamentCode(string url)
    {
        string pattern = @"(?<=\.com/).*$";

        return Regex.Match(url, pattern).Value;
    }

    public async Task GetParticipentsViaURL()
    {
        if(_client == null)
        {
            return;
        }
        
        if (_tournamentUrl != null && _tournamentUrl != "")
        {
            // Clear the current list
            players.Clear();
            _playerHelper.ClearPlayers();

            var url = GetTournamentCode(_tournamentUrl);
            try
            {
                var participants = await _client.GetParticipantsAsync(url);
                List<Participant> participantsList = participants.ToList();

                if (participantsList.Count == 0)
                {
                    return;
                }

                // Add the new Players to the list
                AddPlayerFromParticipant(participantsList);
                players = _playerHelper.GetCurrentPlayers();

                var currentSettings = _challongeAuth.GetSettings();
                currentSettings.CurrentTournament = _tournamentUrl;
                _challongeAuth.SaveSettings(currentSettings);
                StateHasChanged();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }

        }
    }

    void AddPlayerFromParticipant(List<Participant> participants)
    {

        foreach(var participant in participants)
        {
            Player p = new Player
            {
                Name = participant.Name,
                region = "",
                ChallongeId = participant.Id,
                CheckInState = participant.CheckedIn,
                CheckInTime = participant.CheckedInAt
            };

            _playerHelper.AddPlayer(p, "Combined Uk leaderboard");
        }
    }

    public bool HandleCheckIn(bool isCheckedIn)
    {
        return isCheckedIn;
    }
    private async Task OnCheckInStateChanged(Player context)
    {
        if(_client == null)
        {
            return;
        }


        try
        {
            var participant = await _client.GetParticipantAsync(GetTournamentCode(_tournamentUrl), context.ChallongeId);

            // Update the player list
            var index = players.FindIndex(x => x.ChallongeId == context.ChallongeId);

            // if the check in true update time
            if (!context.CheckInState)
            {

                players[index].CheckInState = true;
                players[index].CheckInTime = DateTime.Now;
                await _client.CheckInParticipantAsync(participant);
            }
            else
            {
                players[index].CheckInState = false;
                players[index].CheckInTime = null;

             await _client.UndoCheckInParticipantAsync(participant);
            }
            
            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}