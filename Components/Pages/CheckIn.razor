@using BeybladeTournamentManager.ApiCalls.Challonge
@using BeybladeTournamentManager.ApiCalls.Challonge.Data
@using BeybladeTournamentManager.Helpers
@using BeybladeTournamentManager.Components.Pages.Components
@using Challonge.Api
@using Challonge.Objects
@using System.Text.RegularExpressions
@inject IAutentication _challongeAuth
@inject IPlayerHelper _playerHelper

@page "/"


<MudPaper class="d-flex flex-coloumn justify-center gap-3 mt-3" Elevation="0">
    <NewTournament />
    <AddTournemantByUrl PreviousUrls="previousUrls" OnUrlSelected="HandleUrlAdded" />
    @if (players.Count > 0)
    {
        <MudButton Color="Color.Primary" Variant="Variant.Filled">Add Player</MudButton>
        
    }
    
    </MudPaper>

    <MudPaper class="d-flex mt-2" Width="100%">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudTable T="Player" Items="@players">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Region</MudTh>
                    <MudTh>Check-In</MudTh>
                    <MudTh>Check-In Time</MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>
                        <MudSelect T="string" Value="@context.region" ValueChanged="@(e => context.region = e)">
                            @foreach (var item in regions)
                        {
                            <MudSelectItem T="string" Value="@item">@item</MudSelectItem>
                        }
                    </MudSelect>
                </MudTd>
                <MudTd>
                    <MudSwitch T="bool" Value="@context.CheckInState" @onclick="@(e => OnCheckInStateChanged(context))"
                        Color="Color.Primary" />
                </MudTd>
                <MudTd>
                    <MudText>@context.CheckInTime</MudText>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudContainer>
</MudPaper>




@code {
    ChallongeClient? _client;
    private bool loading = true;
    private MudTable<Player>? _table;
    List<Player> players = new List<Player>();
    List<string> regions = new List<string>{"London", "Norwich", "Oxfordshire", "Yorkshire", "South West", "South East",
"North West", "North East",
"Midlands", "Wales", "Scotland", "Ireland"};
    Dictionary<string, List<Player>> playerCache = new Dictionary<string, List<Player>>();
    private Dictionary<string, string> previousUrls = new Dictionary<string, string>();
    private string _tournamentUrl = "";
    public string currentTournamentUrl = "";
    private bool isInit = false;

    protected override async Task OnInitializedAsync()
    {
        if (_challongeAuth.GetClient() != null)
        {
            _client = _challongeAuth.GetClient();

            if (_challongeAuth.GetSettings().PreviousTournements != null)
            {
                previousUrls = _challongeAuth.GetSettings().PreviousTournements;
            }

            if (_challongeAuth.GetSettings().CurrentTournament != "")
            {
                currentTournamentUrl = _challongeAuth.GetSettings().CurrentTournament;
                await GetParticipentsViaURL(currentTournamentUrl);
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }

    }

    private async Task HandleUrlAdded(string url)
    {

        var currentSettings = _challongeAuth.GetSettings();

        var code = GetTournamentCode(url);

        if (!previousUrls.ContainsKey(code))
        {
            previousUrls.Add(code, url);
            currentSettings.PreviousTournements = previousUrls;

        }

        currentSettings.CurrentTournament = code;
        _challongeAuth.SaveSettings(currentSettings);
        await GetParticipentsViaURL(code);
    }

    string GetTournamentCode(string url)
    {
        string pattern = @"(?<=\.com/).*$";
        Console.WriteLine(Regex.Match(url, pattern).Value);
        return Regex.Match(url, pattern).Value;
    }

    public async Task GetParticipentsViaURL(string code)
    {
        Console.WriteLine("In GetParticipentsViaURL");
        if (_client == null)
        {
            return;
        }

        if (code != "" && _client != null)
        {

            try
            {
                Console.WriteLine("In Try of GetParticipentsViaURL");
                if (playerCache.ContainsKey(code))
                {
                    var cachedPlayers = playerCache[code];

                    bool areEqual = players.SequenceEqual(cachedPlayers);

                    if (!areEqual)
                    {
                        players.Clear();
                        players.AddRange(cachedPlayers);
                    }

                }
                else
                {

                    Console.WriteLine("In Else of GetParticipentsViaURL");
                    var participants = await _client.GetParticipantsAsync(code);

                    Console.WriteLine("Got Participants");
                    List<Participant> participantsList = participants.ToList();

                    players.Clear();
                    _playerHelper.ClearPlayers();
                    await AddPlayerFromParticipant(participantsList);
                    players = _playerHelper.GetCurrentPlayers();

                    // Create a new list instance to avoid reference issues
                    var playersCopy = new List<Player>(players);
                    playerCache[code] = playersCopy;
                }

                currentTournamentUrl = code;
                var currentSettings = _challongeAuth.GetSettings();
                _challongeAuth.SaveSettings(currentSettings);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
            finally
            {
                StateHasChanged();
            }

        }
    }

    async Task AddPlayerFromParticipant(List<Participant> participants)
    {

        foreach (var participant in participants)
        {
            Player p = new Player
                {
                    Name = participant.Name,
                    region = "",
                    ChallongeId = participant.Id,
                    CheckInState = participant.CheckedIn,
                    CheckInTime = participant.CheckedInAt
                };

            _playerHelper.AddPlayer(p, "Combined Uk leaderboard");
        }
    }

    public bool HandleCheckIn(bool isCheckedIn)
    {
        return isCheckedIn;
    }
    private async Task OnCheckInStateChanged(Player context)
    {
        if (_client == null)
        {
            return;
        }

        try
        {
            var participant = await _client.GetParticipantAsync(currentTournamentUrl, context.ChallongeId);

            // Update the player list
            var index = players.FindIndex(x => x.ChallongeId == context.ChallongeId);

            // if the check in true update time
            if (!context.CheckInState)
            {

                players[index].CheckInState = true;
                players[index].CheckInTime = DateTime.Now;
                await _client.CheckInParticipantAsync(participant);
            }
            else
            {
                players[index].CheckInState = false;
                players[index].CheckInTime = null;

                await _client.UndoCheckInParticipantAsync(participant);
            }

            StateHasChanged();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }
}