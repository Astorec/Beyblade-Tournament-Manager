@page "/Bracket"
@using BeybladeTournamentManager.ApiCalls.Challonge
@using BeybladeTournamentManager.ApiCalls.Challonge.Data
@using Challonge.Api
@using Challonge.Objects
@using System.Text.RegularExpressions
@using Pages.Brackets
@inject IAutentication _challongeAuth
@inject IMatches _matches
@inject IParticipants _participants
@inject ITournamentManager _tournamentInfo

<MudPaper Elevation="0">
    <MudContainer>
        @if (!matchesLoaded)
        {
            <MudCard>
                <MudText class="d-flex justify-center">Loading Matches</MudText>
            </MudCard>
        }
        else if(matchesLoaded && matches.Count == 0)
        {
            <NotStartedBracket/>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12">
                    <div class="d-flex justify-content-between align-content-center"> <!-- Flex container for rounds -->
                        @foreach (var roundGroup in matches.GroupBy(m => m.Round).OrderBy(g => g.Key))
                        {
                            
                        <div class="round"> <!-- Each round is a flex column -->

                        @if (roundGroup.Any(m => m.Player1Id != null || m.Player2Id != null))
                            {
                                @if (roundGroup.Key == rounds - 1)
                                {                                           
                                    <!-- if there are no players in the finals, don't display text -->

                                    <MudText Typo="Typo.h6" Class="my-2">Semi-Finals</MudText>
                                }
                                else if (roundGroup.Key == rounds)
                                {
                                       
                                    <MudText Typo="Typo.h6" Class="my-2">Finals</MudText>
                                }
                                else if(roundGroup.Key < rounds - 1)
                                {
                                    <MudText Typo="Typo.h6" Class="my-2">Round: @roundGroup.Key</MudText>
                                }
                            }
                           
                                @foreach (var match in roundGroup)
                                {
                                    if(match.State != MatchState.Pending)
                                    {
                                        if(match.Round < rounds - 1)
                                        {                                     
                                            <div class="bracket-match"> <!-- Each match in the round -->
                                                <MudCard Elevation="4" class="d-flex rounded-pill mud-theme-primary">
                                                    <MudCardContent>
                                                        <div class="d-flex justify-center">
                                                            <div class="d-flex flex-column mr-8 mb-7" Width="70%" Elevation="0">
                                                                <div class="d-flex flex-row pl-8 align-center">
                                                                    <div class="d-flex mt-6 justify-center" >      
                                                                        <MudText class="d-flex align-center align-content-center justify-center ml-2" style="width: 50%;">@(GetPlayer(match, match.Player1Id.Value).Result)</MudText>
                                                                    </div>
                                                                    <div class="d-flex mt-6 justify-center flex-grow-1 flex-gap-4 ml-2">
                                                                        @if(match.State == MatchState.Open)
                                                                        {
                                                                            <MudTextField class="d-flex flex-grow" Margin="Margin.Dense" FullWidth="false" style="width: 100%;" @bind-Value="player1Scores[match.Id]" Variant="Variant.Outlined"/>
                                                                        }
                                                                        else if(match.State == MatchState.Complete)
                                                                        {
                                                                            <MudTextField class="d-flex flex-grow" Margin="Margin.Dense" FullWidth="false" style="width: 100%;" @bind-Value="player1Scores[match.Id]" Variant="Variant.Outlined" Disabled="true"/>
                                                                        }
                                                                       
                                                                    </div>
                                                                </div>                                                            
                                                                <div class="d-flex flex-row pl-8 align-center">
                                                                    <div class="d-flex mt-6 justify-center">
                                                                        <MudText class="d-flex align-center align-content-center justify-center ml-2" style="width: 50%;">@(GetPlayer(match, match.Player2Id.Value).Result)</MudText>
                                                                    
                                                                    </div>
                                                                    <div class="d-flex mt-6 justify-center flex-grow-1 flex-gap-4 ml-2">
                                                                         @if(match.State == MatchState.Open)
                                                                        {
                                                                            <MudTextField class="d-flex flex-grow" Margin="Margin.Dense" FullWidth="false" style="width: 100%;" @bind-Value="player2Scores[match.Id]"Variant="Variant.Outlined"/>
                                                                        }
                                                                        else if(match.State == MatchState.Complete)
                                                                        {
                                                                            <MudTextField class="d-flex flex-grow" Margin="Margin.Dense" FullWidth="false" style="width: 100%;" @bind-Value="player2Scores[match.Id]" Variant="Variant.Outlined" Disabled="true"/>
                                                                        }
                                                                    </div>
                                                                </div>                                                        
                                                            </div>
                                                            @if(match.State != MatchState.Complete)
                                                            {
                                                                <MudIconButton Icon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Success" @onclick="() => UpdateScores(match)"/>
                                                            }
                                                            else{
                                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" @onclick="() => ReopenMatch(match)"/>
                                                            }
                                                        </div>
                                                    </MudCardContent>
                                                </MudCard>                                            
                                            </div>
                                         }
                                        else
                                        {
                                            <div class="bracket-match"> <!-- Each match in the round -->

                                            @if(match.Player1Id != null && match.Player2Id != null)
                                            {
                                                <MudCard Elevation="4" class="d-flex rounded-pill mud-theme-secondary">
                                                    <MudCardContent>
                                                        <div class="d-flex justify-center">
                                                            <div class="d-flex flex-column mr-8 mb-7" Width="70%" Elevation="0">
                                                                <div class="d-flex flex-row pl-8 align-center">
                                                                    <div class="d-flex mt-6 justify-center">
                                                                        <MudText class="d-flex align-center align-content-center justify-center ml-2" style="width: 50%;">@(GetPlayer(match, match.Player1Id.Value).Result)</MudText>
                                                                    </div>
                                                                    <div class="d-flex mt-6 justify-center flex-grow-1 flex-gap-4 ml-2">
                                                                        @if(match.State == MatchState.Open)
                                                                        {
                                                                            <MudTextField class="d-flex flex-grow" Margin="Margin.Dense" FullWidth="false" style="width: 100%;" @bind-Value="player1Scores[match.Id]" Variant="Variant.Outlined" OnChange="@UpdateMatchScore(match.Id, 1, player1Scores[match.Id])"/>
                                                                        }
                                                                        else if(match.State == MatchState.Complete)
                                                                        {
                                                                            <MudTextField class="d-flex flex-grow" Margin="Margin.Dense" FullWidth="false" style="width: 100%;" @bind-Value="player1Scores[match.Id]" Variant="Variant.Outlined" Disabled="true"/>
                                                                        }
                                                                       
                                                                    </div>
                                                                </div>                                                            
                                                                <div class="d-flex flex-row pl-8 align-center">
                                                                    <div class="d-flex mt-6 justify-center">
                                                                        <MudText class="d-flex align-center align-content-center justify-center ml-2" style="width: 50%;">@(GetPlayer(match, match.Player2Id.Value).Result)</MudText>
                                                                    </div>
                                                                    <div class="d-flex mt-6 justify-center flex-grow-1 flex-gap-4 ml-2">
                                                                         @if(match.State == MatchState.Open)
                                                                        {
                                                                            <MudTextField class="d-flex flex-grow" Margin="Margin.Dense" FullWidth="false" style="width: 100%;" @bind-Value="player2Scores[match.Id]" Variant="Variant.Outlined"/>
                                                                        }
                                                                        else if(match.State == MatchState.Complete)
                                                                        {
                                                                            <MudTextField class="d-flex flex-grow" Margin="Margin.Dense" FullWidth="false" style="width: 100%;" @bind-Value="player2Scores[match.Id]"Variant="Variant.Outlined" Disabled="true"/>
                                                                        }
                                                                    </div>
                                                                </div>                                    
                                                            </div>
                                                            @if(match.State != MatchState.Complete)
                                                            {
                                                                <MudIconButton Icon="@Icons.Material.Filled.CheckCircleOutline" Color="Color.Success"/>
                                                            }
                                                            else{
                                                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning"/>
                                                            }
                                                        </div>
                                                    </MudCardContent>
                                                </MudCard>
                                                }
                                            </div>
                                            
                                        }       
                                    }
                                                                
                                }
                            </div>
                        }
                    </div>
                </MudItem>
            </MudGrid>
        }
    </MudContainer>
</MudPaper>

@code {
    ChallongeClient _client;
    private MudTable<Player> _table;
    List<Player> players = new List<Player>();
    List<Challonge.Objects.Match> matches = new List<Challonge.Objects.Match>();
    List<Challonge.Objects.Match> finalsMatches = new List<Challonge.Objects.Match>();
    List<Participant> participants = new List<Participant>();
    Tournament tournament;

    private Dictionary<long, string> playerNames = new Dictionary<long, string>();
    private Dictionary<long, MatchScores> matchScores = new Dictionary<long, MatchScores>();
    private Dictionary<long, int> player1Scores = new Dictionary<long, int>();
    private Dictionary<long, int> player2Scores = new Dictionary<long, int>();

    private Dictionary<long, List<string>> matchList = new Dictionary<long, List<string>>();
    int rounds = 0;
    int player1Score = 0;
    int player2Score = 0;
    bool matchesLoaded = false;
    bool canAddMatch = false;
    bool finals = false;
    bool grandFinals = false;
    string tournamentUrl;
    Dictionary<string, string> tournamentUrls = new Dictionary<string, string>();
    private Timer _timer;

    protected override async Task OnInitializedAsync()
    {
        _client = _challongeAuth.GetClient();
        tournamentUrl = _challongeAuth.GetSettings().CurrentTournament;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            
            if (_client != null)
            {
          
                await LoadInitalDataAsync();
                matchesLoaded = true;
            
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task LoadInitalDataAsync()
    {
        matches = await _matches.GetMatches(tournamentUrl);
        participants = await _participants.GetParticipants(tournamentUrl);

        foreach (var participant in participants)
        {
            playerNames.Add(participant.Id, await GetPlayerName(participant.Id));
        }
        if (matches.Any())
        {
            rounds = matches.Max(m => m.Round);

            // For each match we are adding in a local trracker of the score for each player per match.
            // this is so we can have a local copy of it and update it as needed. I think once we save
            // the data we should probably call for an update and check if things have been updated on
            // the API end and update the local copy if needed.
            foreach(var match in matches)
            {
                // Add Player 1 Score if it doesn't exist otherwise update the Score
                if(!player1Scores.ContainsKey(match.Id))
                {
                    player1Scores.Add(match.Id, match.Scores.Select(s => s.PlayerOneScore).FirstOrDefault());
                }
                else
                {
                    player1Scores[match.Id] = match.Scores.Select(s => s.PlayerOneScore).FirstOrDefault();
                }
                // Add Player 2 Score if it doesn't exist otherwise update the Score
                if(!player2Scores.ContainsKey(match.Id))
                {
                    player2Scores.Add(match.Id, match.Scores.Select(s => s.PlayerTwoScore).FirstOrDefault());
                }
                else
                {
                    player2Scores[match.Id] = match.Scores.Select(s => s.PlayerTwoScore).FirstOrDefault();
                }
            }
        }
        else
        {
            rounds = 0; // or handle the case where there are no matches
        }
    }

    private async Task RefreshData()
    {
        // Check if the client is null
        if (_client != null)
        {
            // Fetch the latest data from the API
            matches = await _matches.GetMatches(tournamentUrl);

            // Update the local state with the latest data
            foreach (var match in matches)
            {
                player1Scores[match.Id] = GetScore(match, 1);
                player2Scores[match.Id] = GetScore(match, 2);
            }

            // Trigger a state update to re-render the component
            await InvokeAsync(StateHasChanged);

        }
    }
    public async Task<string> GetPlayerName(long? pid)
    {
        try
        {
            var participant = await _participants.GetParticipantById(tournamentUrl, Convert.ToInt32(pid.Value));
            return participant.Name;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            return "Player Not Found";
        }
    }

    public async Task<string> GetPlayer(Challonge.Objects.Match match, long? id)
    {
        if(match.State != MatchState.Pending && id.HasValue)
        {
            if (playerNames.ContainsKey(id.Value))
            {
                return playerNames[id.Value];
            }
            else
            {

                return "TBA";
            }
        }
        else
        {
                return "TBA";
        }
    }

    public async Task UpdateScores(Challonge.Objects.Match match)
    {
        // Update Scores for the match in the Local List
        bool isTie = false;
        var player1Score = player1Scores[match.Id];
        var player2Score = player2Scores[match.Id];

        if(player1Score == player2Score)
        {
            isTie = true;
        }
        var matchInfo = new MatchInfo(isTie);

        matchInfo.Scores = new List<Score>{new Score(player1Score, player2Score)};

        if(player1Score > player2Score)
        {
            matchInfo.WinnerId = match.Player1Id;
        }
        else if(player1Score < player2Score)
        {
            matchInfo.WinnerId = match.Player2Id;
        }
        else
        {
            matchInfo.WinnerId = null;
        }        

        await _client.UpdateMatchAsync(match, matchInfo);

        await RefreshData();        

        await InvokeAsync(StateHasChanged);      
    }

    public async Task ReopenMatch(Challonge.Objects.Match match)
    {
        await _client.ReopenMatchAsync(match);
        var index = matches.FindIndex(m => m.Id == match.Id);
          await RefreshData();        

        var updatedMatch = await _client.GetMatchAsync(tournamentUrl, match.Id);
        matches[index] = updatedMatch;

        await InvokeAsync(StateHasChanged);      
    }

    public int GetScore(Challonge.Objects.Match match, int player)
    {
        if(player == 1)
        {
            var scoreOneScore = match.Scores.Select(s => s.PlayerOneScore).FirstOrDefault();
            return scoreOneScore;
        }
        else
        {
            var scoreTwoScore = match.Scores.Select(s => s.PlayerTwoScore).FirstOrDefault();
            return scoreTwoScore;
        }
    }

    public async Task UpdateMatchScore(long matchId, int player, int score)
    {
        switch(player)
        {
            case 1:
                player1Scores[matchId] = score;
                break;
            case 2:
                player2Scores[matchId]  = score;
                break;
        }
    }

    private async Task<bool> IsWinner(long matchId, long? playerId)
    {
        var match = await _client.GetMatchAsync(tournamentUrl, matchId);
        var winner = match.WinnerId;
        return winner == playerId;
    }
    private void UpdatePlayer1Score(long matchId, int value)
    {
        player1Score = value;
        UpdateMatchScore(matchId, player1Score, player2Score);
    }

    private async Task UpdatePlayer2Score(long matchId, int value)
    {
        player2Score = Convert.ToInt32(value);
        UpdateMatchScore(matchId, player1Score, player2Score);
    }


    private int ConvertToInt(string value)
    {
        return int.TryParse(value, out int result) ? result : 0; // Convert string to int, defaulting to 0 on failure
    }

    public class MatchScores{
        public int PlayerOneScore { get; set; }
        public int PlayerTwoScore { get; set; }
    }

    string GetTournamentCode(string url)
    {
        string pattern = @"(?<=\.com/).*$";

        var tournamentId = Regex.Match(url, pattern).Value;

        if(tournamentUrls.ContainsKey(tournamentId))
        {
            return tournamentUrls[tournamentId];
        }
        else
        {
            tournamentUrls.Add(tournamentId, url);
            return tournamentId;
        }
    }

     public void Dispose()
    {
        _timer?.Dispose();
    }
}

<style>
    .bracket-round {
        display: flex;
        flex-direction: column;
        position: relative;
        justify-content: center;
    }

    .d-flex.justify-content-between>.bracket-round {
        margin-right: 450px;
        /* Adjust the right margin to control spacing between rounds */
        flex: 0 1 auto;
        /* Adjust the flex-grow, flex-shrink, and flex-basis values as needed */
        width: auto;
        /* Adjust the width to control how much space each round takes up */
    }

    .bracket-container {
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
    }

    .round {
        margin: 0 20px;
    }

    .finals-round {
        margin: 0 200px;
    }

    .bracket-match {
        padding: 10px;
        position: relative;
        display: flex;
        justify-content: center;        
        align-content: center;
    }


    .round:last-child .bracket-match::after {
        display: none;
    }

    .bracket-match .mud-card {
        min-height: 150px;
        /* Adjust based on your content */
        min-width: 200px;
        /* Adjust based on your content */
        height: 150px;
        /* Ensures a fixed height */
        width: 300px;
        /* Ensures a fixed width */
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        /* Distributes space around items inside the card */
    }

    .center-content {
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
        /* For text alignment if flexbox doesn't cover your needs */
        height: 100%;
        /* Ensure it takes full height of its container */
    }
</style>